name: Publish release

on:
  workflow_dispatch:
    inputs:
      environment:
        type: environment
        description: "Environment in which to execute the release process"
      scope-override:
        type: string
        description: "Manually specify release scope as <pkg>/v<version>"
jobs:
  extract-params:
    name: Determine release parameters
    runs-on: ubuntu-latest
    permissions: {}
    outputs:
      publish-env: ${{ steps.setenv.outputs.envname }}
      version: ${{ steps.getrelease.outputs.version }}
      package: ${{ steps.getrelease.outputs.package }}
      wheel: ${{ steps.getrelease.outputs.wheel }}
    steps:
      - id: setenv
        run: |
          if [[ $GITHUB_EVENT_NAME == 'workflow_dispatch' ]]; then
              echo "envname=${{ inputs.environment }}" >> "$GITHUB_OUTPUT"
          else
              echo "Cannot run release workflow for trigger event $GITHUB_EVENT_NAME"
              exit 1
          fi
          cat "$GITHUB_OUTPUT"
      - uses: actions/checkout@v4
      - name: Get package and version information
        id: getrelease
        run: |
          set -eo pipefail

          if [[ -n "$SCOPE_OVERRIDE" ]]; then
            SCOPE=$SCOPE_OVERRIDE
          elif [[ "${GITHUB_REF:0:10}" == 'refs/tags/' ]]; then
            SCOPE=${GITHUB_REF:10}
          else
            echo "$GITHUB_REF is not a tag, must specify 'scope-override'"
            exit 1
          fi

          FULL_REGEX="\([a-z-]\+\)/v\(.\+\)"
          VER_ONLY_REGEX="v\(.\+\)"

          if echo $SCOPE | grep -q "$FULL_REGEX"; then
            echo $SCOPE \
              | sed "s|$FULL_REGEX|package=\1\nversion=\2|" \
              >> "$GITHUB_OUTPUT"
            echo $SCOPE \
              | sed "s|$FULL_REGEX|wheel=\1|" \
              | tr '-' '_' \
              >> "$GITHUB_OUTPUT"
          elif echo $SCOPE | grep -q "$VER_ONLY_REGEX"; then
            # Default: package = pyhanko
            echo "package=pyhanko" >> "$GITHUB_OUTPUT"
            echo "wheel=pyhanko" >> "$GITHUB_OUTPUT"
            echo $SCOPE \
              | sed "s|$VER_ONLY_REGEX|version=\1|" \
              >> "$GITHUB_OUTPUT"
          else
            echo "Scope $SCOPE does not follow <pkg>/v<version> pattern"
            exit 1
          fi

        env:
          SCOPE_OVERRIDE: ${{ inputs.scope-override }}
      - name: Generate release body
        run: |
          sed "s/:VERSION/$VERSION/g" < .github/gh-release-template-$PACKAGE.md > release.md
          cat release.md
        env:
          VERSION: ${{ steps.getrelease.outputs.version }}
          PACKAGE: ${{ steps.getrelease.outputs.package }}
      - name: Upload release body
        uses: actions/upload-artifact@v4
        with:
          name: release-body
          path: release.md
  ci:
    needs: [extract-params]
    name: Run CI pipeline
    uses: MatthiasValvekens/pyHanko/.github/workflows/build-pipeline.yml@master
    permissions:
      actions: write
      contents: read
    secrets:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    with:
      package: ${{ needs.extract-params.outputs.package }}
      wheel: ${{ needs.extract-params.outputs.wheel }}
      version: ${{ needs.extract-params.outputs.version }}
  provenance:
    name: Generate SLSA provenance data
    needs: [ci]
    permissions:
      actions: read
      id-token: write
      contents: write  # https://github.com/slsa-framework/slsa-github-generator/issues/2044 :(
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.1.0
    with:
      base64-subjects: "${{ needs.ci.outputs.hashes }}"
      upload-assets: false
      provenance-name: multiple.intoto.jsonl
  publish:
    name: Publish release artifacts
    needs: [extract-params, provenance]
    runs-on: ubuntu-latest
    environment: ${{ needs.extract-params.outputs.publish-env }}
    permissions:
      # we use PyPI's trusted publisher model -> expose identity token
      id-token: write
      # we want to add sigstore's artifacts to the release on GitHub
      contents: write
      discussions: write
    steps:
    - name: Download dist artifacts
      uses: actions/download-artifact@v4
      with:
        name: pyhanko-release-dist
        path: dist/
    - name: Download provenance data
      uses: actions/download-artifact@v4
      with:
        name: multiple.intoto.jsonl
        path: provenance/
    - name: Download release body
      uses: actions/download-artifact@v4
      with:
        name: release-body
        path: release-body
    - name: Upload to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: ${{ vars.REPOSITORY_URL }}
    - name: Sign with sigstore
      uses: sigstore/gh-action-sigstore-python@v3.0.1
      with:
        inputs: ./dist/*
        # useful to inspect workflow artifacts in test runs
        upload-signing-artifacts: true
    - name: Create GitHub release
      if: needs.extract-params.outputs.publish-env == 'release' && startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: |
          dist/*.whl
          dist/*.tar.gz
          dist/*.sigstore.json
          provenance/multiple.intoto.jsonl
        body_path: release-body/release.md
        fail_on_unmatched_files: true
        discussion_category_name: Announcements
        prerelease: true
        name: ${{ needs.extract-params.outputs.package }} ${{ needs.extract-params.outputs.version }} beta
